{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from \"../../../services/api\";\nimport history from \"../../../services/history\";\nimport { signInSuccess } from './actions';\nexport function* signIn({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload;\n  const response = call(api.post, 'sessions', {\n    email,\n    password\n  });\n  const {\n    token,\n    user\n  } = response.data;\n\n  if (!user.provider) {\n    toast.error('Usuário não é um prestador de serviço');\n    return;\n  }\n\n  yield put(signInSuccess(token, user));\n  history.push('/dashboard');\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);","map":{"version":3,"sources":["F:/Gabriel/RocketSeat/Bootcamp/modulo9--frontend/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","api","history","signInSuccess","signIn","payload","email","password","response","post","token","user","data","provider","error","push"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,SAASC,aAAT,QAA8B,WAA9B;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,OAA5B;AAEA,QAAMG,QAAQ,GAAGX,IAAI,CAACI,GAAG,CAACQ,IAAL,EAAW,UAAX,EAAuB;AAC1CH,IAAAA,KAD0C;AAE1CC,IAAAA;AAF0C,GAAvB,CAArB;AAKA,QAAM;AAAEG,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBH,QAAQ,CAACI,IAAjC;;AAEA,MAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AAClBb,IAAAA,KAAK,CAACc,KAAN,CAAY,uCAAZ;AACA;AACD;;AAED,QAAMhB,GAAG,CAACK,aAAa,CAACO,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAT,EAAAA,OAAO,CAACa,IAAR,CAAa,YAAb;AACD;AAED,eAAehB,GAAG,CAAC,CAACH,UAAU,CAAC,uBAAD,EAA0BQ,MAA1B,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport api from '~/services/api';\nimport history from '~/services/history';\n\nimport { signInSuccess } from './actions';\n\nexport function* signIn({ payload }) {\n  const { email, password } = payload;\n\n  const response = call(api.post, 'sessions', {\n    email,\n    password,\n  });\n\n  const { token, user } = response.data;\n\n  if (!user.provider) {\n    toast.error('Usuário não é um prestador de serviço');\n    return;\n  }\n\n  yield put(signInSuccess(token, user));\n\n  history.push('/dashboard');\n}\n\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);\n"]},"metadata":{},"sourceType":"module"}