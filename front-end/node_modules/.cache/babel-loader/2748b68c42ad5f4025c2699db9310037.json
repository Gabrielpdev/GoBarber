{"ast":null,"code":"var _jsxFileName = \"F:\\\\Gabriel\\\\RocketSeat\\\\Bootcamp\\\\modulo9--frontend\\\\src\\\\pages\\\\Dashboard\\\\index.js\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { format, subDays, addDays, setHours, setMinutes, setSeconds, setMilliseconds, isBefore, isSameHour, parseISO } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt-BR';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from \"../../services/api\";\nimport { Container, Time } from './styles';\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\nexport default function Dashboard() {\n  const [schedules, setSchedules] = useState([]);\n  const [date, setDate] = useState(new Date());\n  const dateFormated = useMemo(() => format(date, \"d 'de' MMMM\", {\n    locale: pt\n  }), [date]);\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: {\n          date\n        }\n      });\n      console.tron.log(response.data);\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      const data = range.map(hour => {\n        // const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(setHours(date, hour), timezone); // console.tron.log(compareDate);\n\n        console.tron.log(isSameHour(console.tron.log(compareDate), parseISO(compareDate)));\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find(a => isSameHour(console.tron.log(parseISO(a.date)), parseISO(compareDate)))\n        };\n      });\n      setSchedules(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  } // schedules.map((schedule) => console.tron.log(schedule));\n\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handlePrevDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MdChevronLeft, {\n    size: 36,\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, dateFormated), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: handleNextDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MdChevronRight, {\n    size: 36,\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, schedules.map(schedule => /*#__PURE__*/React.createElement(Time, {\n    key: schedule.time,\n    past: schedule.past,\n    avalible: !schedule.appointment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, schedule.time), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, schedule.appointment ? schedule.appointment.user.name : 'Em aberto')))));\n}","map":{"version":3,"sources":["F:/Gabriel/RocketSeat/Bootcamp/modulo9--frontend/src/pages/Dashboard/index.js"],"names":["React","useState","useMemo","useEffect","format","subDays","addDays","setHours","setMinutes","setSeconds","setMilliseconds","isBefore","isSameHour","parseISO","utcToZonedTime","pt","MdChevronLeft","MdChevronRight","api","Container","Time","range","Dashboard","schedules","setSchedules","date","setDate","Date","dateFormated","locale","loadSchedule","response","get","params","console","tron","log","data","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","map","hour","compareDate","time","past","appointment","find","a","handlePrevDay","handleNextDay","schedule","user","name"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport {\n  format,\n  subDays,\n  addDays,\n  setHours,\n  setMinutes,\n  setSeconds,\n  setMilliseconds,\n  isBefore,\n  isSameHour,\n  parseISO,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport pt from 'date-fns/locale/pt-BR';\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\nimport api from '~/services/api';\n\nimport { Container, Time } from './styles';\n\nconst range = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n\nexport default function Dashboard() {\n  const [schedules, setSchedules] = useState([]);\n  const [date, setDate] = useState(new Date());\n\n  const dateFormated = useMemo(\n    () => format(date, \"d 'de' MMMM\", { locale: pt }),\n    [date]\n  );\n\n  useEffect(() => {\n    async function loadSchedule() {\n      const response = await api.get('schedule', {\n        params: { date },\n      });\n\n      console.tron.log(response.data);\n\n      const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      const data = range.map((hour) => {\n        // const checkDate = setSeconds(setMinutes(setHours(date, hour), 0), 0);\n        const compareDate = utcToZonedTime(setHours(date, hour), timezone);\n\n        // console.tron.log(compareDate);\n\n        console.tron.log(\n          isSameHour(console.tron.log(compareDate), parseISO(compareDate))\n        );\n\n        return {\n          time: `${hour}:00h`,\n          past: isBefore(compareDate, new Date()),\n          appointment: response.data.find((a) =>\n            isSameHour(\n              console.tron.log(parseISO(a.date)),\n              parseISO(compareDate)\n            )\n          ),\n        };\n      });\n\n      setSchedules(data);\n    }\n\n    loadSchedule();\n  }, [date]);\n\n  function handlePrevDay() {\n    setDate(subDays(date, 1));\n  }\n\n  function handleNextDay() {\n    setDate(addDays(date, 1));\n  }\n\n  // schedules.map((schedule) => console.tron.log(schedule));\n\n  return (\n    <Container>\n      <header>\n        <button type=\"button\" onClick={handlePrevDay}>\n          <MdChevronLeft size={36} color=\"#fff\" />\n        </button>\n\n        <strong>{dateFormated}</strong>\n        <button type=\"button\" onClick={handleNextDay}>\n          <MdChevronRight size={36} color=\"#fff\" />\n        </button>\n      </header>\n\n      <ul>\n        {schedules.map((schedule) => (\n          <Time\n            key={schedule.time}\n            past={schedule.past}\n            avalible={!schedule.appointment}\n          >\n            <strong>{schedule.time}</strong>\n            <span>\n              {schedule.appointment\n                ? schedule.appointment.user.name\n                : 'Em aberto'}\n            </span>\n          </Time>\n        ))}\n      </ul>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}