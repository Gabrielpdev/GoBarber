{"ast":null,"code":"var _jsxFileName = \"F:\\\\Gabriel\\\\RocketSeat\\\\Bootcamp\\\\modulo9--frontend\\\\src\\\\components\\\\Notifications\\\\index.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt-BR';\nimport api from \"../../services/api\";\nimport { Container, Badge, NotificationList, Scroll, Notication } from './styles';\nexport default function Notifications() {\n  const [visible, setVisible] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const hasUnread = useMemo(() => !!notifications.find(notification => notification.read === false), [notifications]);\n  useEffect(() => {\n    async function loadNotifications() {\n      const response = await api.get('/notifications');\n      const data = response.data.map(notification => ({ ...notification,\n        timeDistance: formatDistance(parseISO(notification.createdAt), new Date(), {\n          addSuffix: true,\n          locale: pt\n        })\n      }));\n      setNotifications(data);\n    }\n\n    loadNotifications();\n  }, []);\n\n  function handleToggleVisible() {\n    setVisible(!visible);\n  }\n\n  async function handleMarkAsRead(id) {\n    await api.put(`/notifications/${id}`);\n    setNotifications(notifications.map(notification => notification._id === id ? { ...notification,\n      read: true\n    } : notification));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    onClick: handleToggleVisible,\n    hasUnread: hasUnread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MdNotifications, {\n    color: \"#7159c1\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(NotificationList, {\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Scroll, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, notifications.map(notification => /*#__PURE__*/React.createElement(Notication, {\n    unread: !notification.read,\n    key: notification._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, notification.content), /*#__PURE__*/React.createElement(\"time\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, notification.timeDistance), !notification.read && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => handleMarkAsRead(notification._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"Marcar como lida\"))))));\n}","map":{"version":3,"sources":["F:/Gabriel/RocketSeat/Bootcamp/modulo9--frontend/src/components/Notifications/index.js"],"names":["React","useState","useEffect","useMemo","MdNotifications","parseISO","formatDistance","pt","api","Container","Badge","NotificationList","Scroll","Notication","Notifications","visible","setVisible","notifications","setNotifications","hasUnread","find","notification","read","loadNotifications","response","get","data","map","timeDistance","createdAt","Date","addSuffix","locale","handleToggleVisible","handleMarkAsRead","id","put","_id","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { MdNotifications } from 'react-icons/md';\nimport { parseISO, formatDistance } from 'date-fns';\nimport pt from 'date-fns/locale/pt-BR';\n\nimport api from '~/services/api';\n\nimport {\n  Container,\n  Badge,\n  NotificationList,\n  Scroll,\n  Notication,\n} from './styles';\n\nexport default function Notifications() {\n  const [visible, setVisible] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  const hasUnread = useMemo(\n    () => !!notifications.find((notification) => notification.read === false),\n    [notifications]\n  );\n\n  useEffect(() => {\n    async function loadNotifications() {\n      const response = await api.get('/notifications');\n\n      const data = response.data.map((notification) => ({\n        ...notification,\n        timeDistance: formatDistance(\n          parseISO(notification.createdAt),\n          new Date(),\n          { addSuffix: true, locale: pt }\n        ),\n      }));\n\n      setNotifications(data);\n    }\n    loadNotifications();\n  }, []);\n\n  function handleToggleVisible() {\n    setVisible(!visible);\n  }\n\n  async function handleMarkAsRead(id) {\n    await api.put(`/notifications/${id}`);\n\n    setNotifications(\n      notifications.map((notification) =>\n        notification._id === id ? { ...notification, read: true } : notification\n      )\n    );\n  }\n\n  return (\n    <Container>\n      <Badge onClick={handleToggleVisible} hasUnread={hasUnread}>\n        <MdNotifications color=\"#7159c1\" size={20} />\n      </Badge>\n\n      <NotificationList visible={visible}>\n        <Scroll>\n          {notifications.map((notification) => (\n            <Notication unread={!notification.read} key={notification._id}>\n              <p>{notification.content}</p>\n              <time>{notification.timeDistance}</time>\n              {!notification.read && (\n                <button\n                  type=\"button\"\n                  onClick={() => handleMarkAsRead(notification._id)}\n                >\n                  Marcar como lida\n                </button>\n              )}\n            </Notication>\n          ))}\n        </Scroll>\n      </NotificationList>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}